<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>D3 Bar Chart</title>
</head>
<body>
    <h2>Org Chart</h2>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-org-chart@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-flextree@2.1.2/build/d3-flextree.js"></script>

    <div class="chart-container" style="height: 1200px; background-color: white"></div>

    <script>
      var chart;

      function buildTree(data, ceo_name) {
        const treeData = [];

        // First, create a map of nodes keyed by their id
        const nodeMap = {};
        data.forEach(node => {
          node.children = [];
          nodeMap[node.id] = node;
        });

        // Next, build the tree by iterating over each node and adding it to its parent's children array
        data.forEach(node => {
          if (node.parentId && node.parentId !== node.id) {
            const parentNode = nodeMap[node.parentId];
            if(parentNode) {
              parentNode.children.push(node);
            } else {
              console.warn(`Node ${node.id} has a parent with ID ${node.parentId} that doesn't exist`);
            }
          } else {
            // If the node has no parent, it is a root node and should be added to the tree
            treeData.push(node);
          }
        });

        // Find the tree with the ultimate parent node whose name matches the specified CEO name
        const treeWithCEO = findTreeWithCEO(treeData, ceo_name);

        // Convert the tree back to the same data type as d3.csv() returns
        const result = [];
        if (treeWithCEO) {
          addNodesToResult(treeWithCEO, result);
        }
        return result;
      }

      function findTreeWithCEO(treeData, ceo_name) {
        for (let i = 0; i < treeData.length; i++) {
          const node = treeData[i];
          if (node.name === ceo_name) {
            return node;
          } else if (node.children.length > 0) {
            const result = findTreeWithCEO(node.children, ceo_name);
            if (result) {
              return result;
            }
          }
        }

        return null;
      }

      function addNodesToResult(node, result) {
        result.push({
          name: node.name,
          office: node.office,
          positionName: node.positionName,
          id: node.id,
          parentId: node.parentId
        });

        node.children.forEach(child => { addNodesToResult(child, result); });
      }

      d3.csv('csv/org_structure.csv').then( data => {
          return buildTree(data, 'James Swift');
      }).then((dataFlattened) => {
        const mappedData = dataFlattened.map((d) => {
          const width = Math.round(Math.random() * 50 + 300);
          const height = Math.round(Math.random() * 20 + 130);
          const cornerShape = ['ORIGINAL', 'ROUNDED', 'CIRCLE'][
            Math.round(Math.random() * 2)
          ];
          const nodeImageWidth = 100;
          const nodeImageHeight = 100;
          const centerTopDistance = 0;
          const centerLeftDistance = 0;
          const expanded = false; //d.id=="O-6"

          const titleMarginLeft = nodeImageWidth / 2 + 20 + centerLeftDistance;
          const contentMarginLeft = width / 2 + 25;
          return {
            nodeId: d.id,
            parentNodeId: d.parentId,
            width: width,
            height: height,
            borderWidth: 1,
            borderRadius: 5,
            borderColor: {
              red: 15,
              green: 140,
              blue: 121,
              alpha: 1,
            },
            backgroundColor: {
              red: 51,
              green: 182,
              blue: 208,
              alpha: 1,
            },
            nodeImage: {
              url: d.imageUrl,
              width: nodeImageWidth,
              height: nodeImageHeight,
              centerTopDistance: centerTopDistance,
              centerLeftDistance: centerLeftDistance,
              cornerShape: cornerShape,
              shadow: false,
              borderWidth: 0,
              borderColor: {
                red: 19,
                green: 123,
                blue: 128,
                alpha: 1,
              },
            },
            nodeIcon: {
              icon: 'https://to.ly/1yZnX',
              size: 30,
            },
            template: `<div>
                  <div style="margin-left:${titleMarginLeft}px;
                              margin-top:10px;
                              font-size:15px;
                              font-weight:bold;
                         ">${d.name} </div>
                 <div style="margin-left:${titleMarginLeft}px;
                              margin-top:3px;
                              font-size:13px;
                         ">${d.positionName} </div>

                 <div style="margin-left:${titleMarginLeft}px;
                              margin-top:3px;
                              font-size:12px;
                         ">${d.unit?.value || 'Unit'}</div>

                 <div style="margin-left:${contentMarginLeft}px;
                             margin-top:15px;
                             font-size:12px;
                             position:absolute;
                             bottom:5px;
                            ">
                      <div>${d.office}</div>
                      <div style="font-size:12px;margin-top:5px">${d.area}</div>
                 </div>
              </div>`,
            connectorLineColor: {
              red: 220,
              green: 189,
              blue: 207,
              alpha: 1,
            },
            connectorLineWidth: 5,
            dashArray: '',
            expanded: expanded,
          };
        });

        chart = new d3.OrgChart()
          .container('.chart-container')
          .data(mappedData)
          .nodeWidth((n) => 250)
          .nodeHeight((n) => 120)
          .compactMarginBetween((d) => 50)
          .siblingsMargin((d) => 100)
          .nodeContent((d) => {
            return `
              <div class="outer-wrapper" style="padding-left:70px;padding-top:0px;background-color:none;width:${
                d.width - 70
              }px;height:${d.height}px">

                <div  style="margin-left:-70px;margin-top:-40px;border-radius:5px;color:white;background-color:#2DA7C6;width:${
                  d.width
                }px;  height:${d.height}px">
                   <div style="margin-left:-30px;padding-top:2px">${
                     d.data.template
                   }</div>

                </div>

                <div style="color:white;margin-top:-37px;margin-left:-65px"> ${
                  d.data._totalSubordinates
                } Subordinates <br/> ${d.data._directSubordinates} Direct</div>
              </div>
              `;
          })
          .render();
      });
    </script>
</body>
</html>
